# Generated by Django 4.2.25 on 2025-10-02 23:02

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("queues", "0003_initial"),
        ("tickets", "0002_initial"),
        ("customers", "0001_initial"),
        ("tenants", "0002_initial"),
        ("users", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Feedback",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "csat_score",
                    models.IntegerField(
                        blank=True,
                        help_text="Customer Satisfaction Score (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "nps_score",
                    models.IntegerField(
                        blank=True,
                        help_text="Net Promoter Score (0-10)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "wait_time_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Évaluation du temps d'attente",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "service_quality_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Qualité du service",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Tags prédéfinis sélectionnés",
                    ),
                ),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="feedbacks",
                        to="users.agentprofile",
                    ),
                ),
                (
                    "appointment",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="tickets.appointment",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="feedbacks",
                        to="customers.customer",
                    ),
                ),
                (
                    "queue",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="feedbacks",
                        to="queues.queue",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to="tenants.tenant",
                    ),
                ),
                (
                    "ticket",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="tickets.ticket",
                    ),
                ),
            ],
            options={
                "db_table": "feedbacks",
                "ordering": ("-submitted_at",),
                "indexes": [
                    models.Index(
                        fields=["tenant", "submitted_at"],
                        name="feedbacks_tenant__923283_idx",
                    ),
                    models.Index(
                        fields=["csat_score"], name="feedbacks_csat_sc_df6a57_idx"
                    ),
                    models.Index(
                        fields=["nps_score"], name="feedbacks_nps_sco_90f009_idx"
                    ),
                ],
            },
        ),
    ]
